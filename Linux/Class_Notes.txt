************************
Day 3 : 29th Jan. 2025 
************************
				
Fundamentals of Linux Operating System:
1.	Overview of Linux
2.	Linux Architecture
3.	Linux Distributions
4.	Basic Linux Commands
5.	File Permission Management
6.	User Creation
7.	Shell Scripts
8.	SSH and VI Utility


Operating System :::

	Fundamentals of Linux Operating System 
	
		- Windows 
		- Mac 
		- Linux 
		
	Linux Operating System 
		- Open-Source 
		- Is Secured 
		- Linux OS was created based on the Unix Operating System 
		- Is an interface between the user applications and underlying Hardware.
		- Linux OS is based on the Command User Interface
		- Core of Linux OS is called kernel!
			Components of Linux OS Architecture
				- Networking 
				- Storage 
				- IPC - Inter Process Communication
				- User Management 
				- Security Management 
				- Control Groups 
				- Namespace 
				- Process 
			
		- Command Line Interface 
		
	Linux Distributions --> 
	
		--> Versions or types of Linux OS.
		--> Flavor of Linux OS
		
		- Centos / RHEL 
		
		- Debian / Ubuntu
		
		- Fedoro
		
		- Amazon Linux2 
		
			-> Based on Federo Distribution
			
		
		- Packages :::
		
			Package Management - Package Managers :::
				- Package Managers are used to install/Uninstall/Upgrade the Packages/software 
			
					- Centos / RHEL 		===> 	yum package Manager 
					- Debian / Ubuntu 		===>	apt/apt-get package Manager 
					- Fedora				===>	dnf (Latest Version of Fedora)
													yum (Previous Version of Fedora)
													
				- Package Managers can be executed only by the root user on Linux
				
					- TO work with Package Manager :
						- Elevate the Access to Root Level 
							- sudo -i			# This Command is used to elevate the access to root level


	Learn Linux on DevOps Perspectives :
	
		What the Role of DevOps Team/Engineer on Linux.
		
			- All the DevOps Tools can be installed and Managed in Linux Machines 
		
		What is your role here ????
		
			- Install all the DevOps Tools 
			- Package Management - Periodically Upgrade/Uninstall - Backup of the Tools
			- Managing Remote Servers 
				- Client Server Architecture 
				- Server1 (VM)
					- Client1,2,3,4,5,6
					
			- As a DevOps Team we can Manage the Linux Machines
			
				- Package Management 
				- File Management 
				- User Management 
				- Access Management 
				- Remote Servers Management 
				- Process Automation(Shell Scripting)
				
	AWS Cloud Platform :
	
		--> Create Virtual Machines(VM) - Linux based OS 
				--> Install and work with DevOps Tools 
	
	Lab Environment ::::
	
		- Create a Fier Tier Account on AWS Cloud 		# aws.amazon.com/console/
														# https://signin.aws.amazon.com/signup?request_type=register
														
			- Avail Free Tier Account access for 12 Months
		
		- Active Email_ID, Mobile Number, Credit/Debit Card(International Transaction Enabled)
		
		- Create Free-tier AWS Account - Basic Plan 
		
		- Login to AWS Console as a root user.		# aws.amazon.com/console/
			- Email_ID 
			- Password 
		
		- Access to AWS Console :
		
			- EC2 Service (Elastic Compute Service) --> Create EC2 Instances VM.
			
			
		- Working with (VM) EC2 Instances :
		
			- Create an EC2 Instance
			
				- Name/Tag
				
				- AMI - Amazon Machine Image 			# Identify the type of OS - Amazon Linux/Ubuntu/Windows/Mac
				- Instance Type 						# CPU & RAM 
				- Key Pairs								# Used to Securely Login to EC2 Instances 
				
				
				- Network
				- Security Group 
				- Volumes 
				
					Authentication Types :
					
						SSH Connection to any Linux based Remote Servers 
						
							- Password based Authentication
							- Token based Authentication
							- Key-Based Authentication
								- Public Key/Authorized Key 
								- Private Key 
							- Passwordless Connection
							
Next :

	- Launch an EC2 Instance 
			- ubuntu v22.04 AMI 
			- t2.mirco
			
	- Connect to EC2 Instance

			Using SSH Connection

	- Working with Linux 	
			
				- Package Management 
				- File Management 
				- User Management 
				- Access Management 
				- Remote Servers Management 
				- Process Automation(Shell Scripting)		


************************
Day 4 : 30th Jan. 2025 
************************		
				
	- Launch an EC2 Instance 
	
		- Login to AWS Console 
			- goto EC2 Instance Dashboard 
			
				- Select Launch EC2 Instance Button

				- Key-in the required parameters to Create an EC2 Instance
				
					- Name/Tag
					
					- AMI - Amazon Machine Image 			# Identify the type of OS - Amazon Linux/Ubuntu/Windows/Mac
						- ubuntu v22.04 AMI 
					
					- Instance Type 						# CPU & RAM 
					- Key Pairs								# Used to Securely Login to EC2 Instances 
						- Create Key Pairs	
							- Downloads - *.pem				# Private Key 
					
					
					- Network
					- Security Group 
					- Volumes 


	
			- ubuntu v22.04 AMI 
			- t2.mirco
			
			
			1 VM ==> 750 Hrs / Month 
			
			10 VM ==> 75 Hrs/Month
			
			
			Using SSH Connection
			
				--> Parameters required to Connect to remote servers using SSH :
						
						- Host_Name	 			# Public IP_Address 		
						- User_Name 			# ubuntu					---> for Ubuntu Machine 
						- Private Key
						
	- Connect to EC2 Instance(VM)

			Using SSH Connection
			
				--> Parameters required to Connect to remote servers using SSH :
						
						- Host_Name	 		
						- User_Name 
						- Private Key
			
			Various Modes to Access EC2 Instances :			
			
				-> EC2 Instance Connect using AWS Console 
				
				-> SSH Agents :			# Install in Local Windows Machine
				
					- MobaXterm			# https://mobaxterm.mobatek.net/download-home-edition.html
					- putty 
					
				-> Terminal				# Mac/Linux/Windows	
	
	
	- Working with Linux 	
			
				- Package Management 
				- File Management 
				- User Management 
				- Access Management 
				- Remote Servers Management 
				- Process Automation(Shell Scripting)		
	
	- Package Management :::
	
		--> Process to Manage any Linux Packages/Software 
		--> Install/Uninstall/Upgrade the Packages
		--> Package :		
				Tool 
				Service 
														Java Build Environment :		Tomcat Server :
														
				-> Install the Pre-requisities 				- Install JDK 					- Install JDK
				-> Install the Actual Package 				- Install Maven					- Install Tomcat  
				-> Perform Post Install Activities 											- Start Tomcat Service 
				

			- Package Managers are used to install/Uninstall/Upgrade the Packages/software 
		
				- Centos / RHEL 		===> 	yum package Manager 
				
				- Debian / Ubuntu 		===>	apt/apt-get package Manager 
				
				- Fedora				===>	dnf (Latest Version of Fedora)
												yum (Previous Version of Fedora)
												
				- Amazon Linux 			===> 	dnf (Latest Version of Amazon Linux)
				                                yum (Previous Version of Amazon Linux)
												
			- Package Managers can be executed only by the root user on Linux
			
				- TO work with Package Manager :
					- Elevate the Access to Root Level 
						- sudo -i			# This Command is used to elevate the access to root level
						
						
			How to Install/Manage Packages ? :::
			
			- Elevate the Access to Root Level
				sudo -i 							# This Command is used to elevate the access to root level
				
			- apt update 							# Used update the default packages
			
			- apt install git 						# Install GIT 
			
			- apt install openjdk-11-jre -y			# Install Java Package 
			
			- java --version						# Check the Version 
				
			- apt install maven -y 					# Install Maven Build Tool
			
			- apt install nginx -y 					# Install Nginx Web Application Server	- This runs as a service
													# Nginx Service runs in the default port 80 
													
													# Tomcat 	: 8080
													# jenkins 	: 8080

			- Linux Application Service(nginx/Jenkins) 		
			
				- Start / Stop / Enable / Status / restart 
				
				systemctl status nginx 
				
				systemctl start nginx
				
				systemctl stop nginx
				
				systemctl enable nginx		# Used to define the service as as start up service
		
				systemctl disable nginx		# Used to remove the service from the start-up task list
				
				systemctl restart nginx 	
				
				
			- apt update nginx -y 			
			
			- apt remove nginx -y			# Uninstall a package 
			
			
			
	- File Management :::
	
		Folders / Directories 
			- Collection of Files and Directories

			dir 
			
		Any Linux User - will have Home Directory  
		


		- File Management 	

			- pwd 				# Present Working Directory
			
			- sudo -i 
			
			- exit 				# Logout from current linux user 


			- ls 				# Is to List the files and Directories 
			
			- ll 				# Long Listing - to get the full property of the directory
			
			- ls -a				# List All(List all the files, including hidden files and directories)
			
			- clear 			# Clear the Screen				
				
			- mkdir <dir_name>	# used to Creae Directory 
				
			Navigate to Directories :::

				- pwd				# Get the Present Working Directory

				- cd ..				# Go Back to Previous Directory
				
				- cd <dir_name> 	# Change to a specific directory				
				
				- cd /				# This command will take to the root directory			
			
				- cd ~				# This command will take to the home directory(Default Directory) of the specific linux user
									Eg.: 	ubuntu 	===> /home/ubuntu 
		
									root	===> /root		
									
			Create Files :
				
					- touch <file_name>					# used to create an empty file 
					
					- echo "Record1" >> <file_name>		# To create a file with a record
							
					- vi <file_name>		# Used to Create / edit a file using vi editor
					
					
			Read the file content :
				
					cat <file_name>			# Read the Content of a file
					
					
					- vi <file_name>		# Used to Create / edit a file using vi editor

					Eg.: 
					
						vi file1.txt 
						
							press i 		# goto insert mode 
							
							#type some contents
							#type some contents				
							
							press esc :wq	# Save and Exit from a file 
	
							press esc :q!	# Exit from a file without saving it. 				


    1  apt update -y
    2  clear
    3  yum update -y
    4  clear
    5  apt install git
    6  apt install openjdk-11
    7  apt install openjdk-11-jre
    8  java --version
    9  git --version
   10  apt install nginx -y
   11  nginx --version
   12  nginx -version
   13  systemctl status nginx
   14  systemctl stop nginx
   15  systemctl status nginx
   16  apt upgrade nginx -y
   17  exit
   18  pwd
   19  exit
   20  pwd
   21  ls
   22  ls -a
   23  ll
   24  clear
   25  pwd
   26  ls -a
   27  ll
   28  clear
   29  ls
   30  mkdir dir1
   31  ls
   32  ll
   33  clear
   34  ls
   35  mkdir dir2
   36  ls
   37  ped
   38  pwd
   39  cd dir1
   40  pwd
   41  cd ..
   42  pwd
   43  clear
   44  pwd
   45  cd /
   46  pwd
   47  ls
   48  cd home/
   49  ls
   50  cd ubuntu/
   51  pwd
   52  clear
   53  cd ~
   54  pwd
   55  clear
   56  ls
   57  cd dir1/
   58  pwd
   59  ls
   60  clear
   61  touch file1.txt
   62  ls
   63  cat file1.txt
   64  touch file2.txt file3.txt
   65  ls
   66  echo "Hello"
   67  echo "Hello" >> testfile1.txt
   68  ls
   69  cat testfile1.txt
   70  echo "Hello" >> file1.txt
   71  cat file1.txt
   72  vi samplefile1.txt
   73  cat samplefile1.txt
   74  clear
   75  vi samplefile1.txt
   76  cat samplefile1.txt
   77  clear
   78  cd ~
   79  history


							
************************
Day 5 : 3rd Feb. 2025 
************************	

				- Package Management 
				- File Management 
				- User Management 
				- Access Management 
				- Remote Servers Management 
				- Process Automation(Shell Scripting)	
				

		- File Management(Continued)


			Directories / Files ::
			
				Create 
				
				Update 
				
				Delete 
				
				Rename 
				
				Copy 
				
				Move 
			
			
			Rename File or Directory :::
			
						mv <existing_file_Name> <New_File_Name>
					
						mv file1 file-new-name
						
						mv dir1 new-dir-name
						
			Delete a file or Directory :::
					
						rm <file_Name>			# Remove File  
						
						rm file1.txt 
						
						rm *.txt
						
						rm -r <dir_Name>		# Remove Directory
						
						rm -rf <dir_name>		# Forceful Deletion of Directory
						
						
			Copy files from one directory to another :::
			
						cp <source_file> <Target_Dir>	# Used to copy a file to target folder 
						
						mv <source_file> <Target_Dir>	# Used to move a file to target folder 
			
						mv file1 file-new-name			# To Rename a file
						mv dir1 new-dir-name			# To Rename a directory
		
			File Access ::::
			
				Who can Access the file ?
				
					- By Default, Owner will have complete access. 			



		File :
		
			script 
			program 
			artifacts 
			
			
			>> ll 						# Long Listing 
			
		
		-rw-r--r--  1 root root  161 Apr 22  2024 .profile
		drwx------  2 root root 4096 Jan 30 01:55 .ssh/
		-rw-------  1 root root 1389 Jan 30 03:25 .viminfo
		drwxr-xr-x  3 root root 4096 Feb  3 02:00 dir1/
		
		----------
		
		-									# Denote dir or file (Possible value:  d or - )
												'd'  Denotes Directory
												'-'  Denotes File 
												
												
		 ---								# Denote the Owner Level Access 
												Possible Values: r / w /x 
												r - Read only Access 
												w - Write Access 
												x - Execute Access 
		
			---								# Denote the Group Level Access
												Possible Values: r / w /x 
												r - Read only Access 
												w - Write Access 
												x - Execute Access

			   ---							# Denote the Public User Level Access
												Possible Values: r / w /x 
												r - Read only Access 
												w - Write Access 
												x - Execute Access
												
		
		User 
		
		Group 
		
		User 
		
		Group 
		
		Role Based Access Control : 
		
		RBAC --> User_ID --> Group

			dev_user1
			Developer_grp 
			
			Test_User1 
			Tester_Grp
	

		Default Access assigned to a dir/file :
			
			drwxr-xr-x  3 root root 4096 Feb  3 02:00 dir1/
			
			-rw-r--r--  1 root root    5 Feb  3 02:17 file1.txt
			
			-rw-r--r--  1 root root    5 Feb  3 02:19 test1.sh



	
	- File Access Management :::
	
		-> Give Access to the Files/Directories 
		

		Access Mode :::
			r - Read only Access 
			w - Write Access 
			x - Execute Access	
			
		chmod <Access_Level> <File/Directory_Name>		
		
		https://nettools.club/chmod_calc
		
		chmod 600 dir1/*
		
		Folder ::::
		
		
			file1.txt_v1.0		==> 	Test_dir1		file1.txt_v1.0	
			
			file1.txt_v1.1		==> 	Test_dir1		file1.txt_v1.1
		
		
	- User Management :::
	
		-> Give Access to the Users -- handling remote servers 
		
		
		Create Linux Users :::
		
			ubuntu user 				# In Ubutu server -- Default User is ubuntu
			
			root user 					# Administrator 
			
			
			
			devopsadmin					# Linux User
			
		
		Linux Machine uses SSH(Secure SHell) Connection
			--> Host_Name,User_Name,Credentials
		
		User Authentication?
			SSH Authentication Methods :
			
				- Password Based Authentication
				- Token Based Authentication
				- Key Based Authentication
					- Public Key/Private Key 
				- Passwordless 
		
		How to Create Linux User?
			- devopsadmin 


		Create Linux User with SSH Keys :::
		
			root@ip-172-31-1-164:~# useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin			# In Ubuntu Machines!
			
			#useradd devopsadmin
			
			passwd devopsadmin													# Create Password 

			root@ip-172-31-1-164:~# passwd devopsadmin
			New password:
			Retype new password:
			passwd: password updated successfully


				- Key Based Authentication
					- Public Key/Private Key 
					
					- authorized_keys			# Should be create based on the public of the user
					
					- authorized_keys file will be compared with the private key(which we pass during login)



			# Create SSH Keys for devops admin user :
			
			
				ssh-keygen -t ecdsa -b 521										#ubuntu 22.04 or higher version of ubuntu				

				cd .ssh
				
				ls ~/.ssh 

				#You should see following two files:

				#id_ecdsa - private key
				#id_ecdsa.pub - public
				
				cat id_ecdsa.pub > authorized_keys			# authorized_keys this file name should be same.
				
				authorized_keys :::
					It is the copy of Public Key.
					
					Always the private key will be compared with the authorized_keys
	
				chmod 600 /home/devopsadmin/.ssh/*					# Used to Change the Access Mode of Files or Directories
				


   1  pwd
    2  exit
    3  pwd
    4  clear
    5  exit
    6  clear
    7  ls
    8  ls -a
    9  exit
   10  ls -a
   11  ssh-keygen -t ecdsa -b 521
   12  ls -a
   13  cd .ssh/
   14  ls
   15  ll
   16  cat id_ecdsa
   17  cat id_ecdsa.pub
   18  ls
   19  cat id_ecdsa.pub > authorized_keys
   20  ls
   21  ll
   22  chmod 600 /home/devopsadmin/.ssh/*
   23  ll
   24  clear
   25  history


    1  apt update -y
    2  clear
    3  yum update -y
    4  clear
    5  apt install git
    6  apt install openjdk-11
    7  apt install openjdk-11-jre
    8  java --version
    9  git --version
   10  apt install nginx -y
   11  nginx --version
   12  nginx -version
   13  systemctl status nginx
   14  systemctl stop nginx
   15  systemctl status nginx
   16  apt upgrade nginx -y
   17  exit
   18  pwd
   19  exit
   20  pwd
   21  ls
   22  ls -a
   23  ll
   24  clear
   25  pwd
   26  ls -a
   27  ll
   28  clear
   29  ls
   30  mkdir dir1
   31  ls
   32  ll
   33  clear
   34  ls
   35  mkdir dir2
   36  ls
   37  ped
   38  pwd
   39  cd dir1
   40  pwd
   41  cd ..
   42  pwd
   43  clear
   44  pwd
   45  cd /
   46  pwd
   47  ls
   48  cd home/
   49  ls
   50  cd ubuntu/
   51  pwd
   52  clear
   53  cd ~
   54  pwd
   55  clear
   56  ls
   57  cd dir1/
   58  pwd
   59  ls
   60  clear
   61  touch file1.txt
   62  ls
   63  cat file1.txt
   64  touch file2.txt file3.txt
   65  ls
   66  echo "Hello"
   67  echo "Hello" >> testfile1.txt
   68  ls
   69  cat testfile1.txt
   70  echo "Hello" >> file1.txt
   71  cat file1.txt
   72  vi samplefile1.txt
   73  cat samplefile1.txt
   74  clear
   75  vi samplefile1.txt
   76  cat samplefile1.txt
   77  clear
   78  cd ~
   79  history
   80  ls
   81  cd dir1
   82  ls
   83  clear
   84  cd ..
   85  ls
   86  cd dir2/
   87  ls
   88  cd ..
   89  ls
   90  mv dir2 sampledir2
   91  ls
   92  cd dir1/
   93  ls
   94  mv file1.txt dummyfile1.txt
   95  ls
   96  rm testfile1.txt
   97  ls
   98  rm -r samplefile1.txt
   99  ls
  100  ckear
  101  clear
  102  cd ..
  103  ls
  104  rm sampledir2/
  105  ll
  106  rm -rf sampledir2/
  107  ls
  108  cd dir1/
  109  ls
  110  clear
  111  ls
  112  rm *.txt
  113  ls
  114  echo "record1" >> file1.txt
  115  cat file1.txt
  116  echo "record1" >> file2.txt
  117  ls
  118  echo "record2" >> file1.txt
  119  cat file1.txt
  120  echo "record3" >> file1.txt
  121  cat file1.txt
  122  echo "dummyrecord1" > file1.txt
  123  ls
  124  cat file1.txt
  125  ls
  126  mkdir dir2
  127  clear
  128  ls
  129  pwd
  130  cd dir2
  131  ls
  132  cd ..
  133  cd dir2
  134  pwd
  135  cd ..
  136  pwd
  137  ls
  138  cp file1.txt /root/dir1/dir2
  139  ls
  140  cd dir2/2
  141  cd dir2
  142  ls
  143  pwd
  144  cd ..
  145  ls
  146  mv file2.txt /root/dir1/dir2
  147  ls
  148  cd dir2
  149  ls
  150  mv file1.txt /root/dir1/samplefile1.txt
  151  ls
  152  cd ..
  153  ls
  154  clear
  155  ls
  156  cd dir2/
  157  ls
  158  cd ..
  159  cd dir2/
  160  pwd
  161  cd ..
  162  mv samplefile1.txt /root/dir1/dir2/dummyf1.txt
  163  ls
  164  cd dir2/
  165  ls
  166  cat dummyf1.txt
  167  ls
  168  ll
  169  exit
  170  cd /home/ubuntu/
  171  ls
  172  exit
  173  clear
  174  ls
  175  ll
  176  exit
  177  clear
  178  useradd dummyuser1
  179  su - dummyuser1
  180  useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin
  181  su - devopsadmin
  182  su - dummyuser1
  183  su - devopsadmin
  184  passwd devopsadmin
  185  su - dummyuser1
  186  exit
  187  history


Next :::

	User Management
	
	Access Management & Handling Remote Server 
	
	
	Fundamentals of Shell Scripting!

**********************
Day 6 : 4th Feb. 2025 
**********************

	- User Management :::
	
	
		- Created a Linux User 
		
			--> User Group get created automatically
			
			--> A Linux User can be part of many groups
			
			--> Get the List of Linux Users ::::
					
					$ cd /etc 
					
					$ cat passwd
			
			--> Get the list of Linux User Groups ::::
			
					$ cd /etc 
					
					$ cat group
					
					
		apt install docker.io -y		
		
		docker --version

		To Add Any User to a Group :
		
			usermod -aG <group_name> <user_name>
		
			usermod -aG docker devopsadmin
			
			
		passwd -d <user_name>		# Delete Linux User Password
		
		$ su - devopsadmin
		
		$ rm -rf .ssh/				# Delete Linux User's SSH Key Pair
		
		User Profile :
		
			- Best Practises :
			
				- Passwd / ssh key  should be renewed periodically. 
				
				- Create ssh keys Dynamically.
				
		

	- Handling Remote Server  ::::
	
		Access Management 
		
		Target Server or the Server Architecture 
		
			--> Client/Server Architecture 
		
		Scenario 1 :
		
			VM1 --> Source File1 
			
			VM2 --> Target Server 
			
		Remote Server Access :::
		
			AWS Cloud :
			
				VM1	(Server)
				
				VM2 (Client)
						
			1. Establish Connection to Remote Server  
			2. Login to the Remote Server 
			3. Copy the Files from one server to another server
				using SCP
			4. Manage the Remote Server - Install any package/Uninstall/Upgrade 
			
			Pre-requisites for Remote Server :::
			
				- Launch 2 VMs (VM1-Source & VM2-Target)
				
				- Ensure that Port 22 is enabled 
				
				- Create User in both the VMs 
				
				- Create SSH-Key in one server(VM1)
				
				- Use the public_Key as a authorized_keys in the Client Machine(VM2)
				
				- Establish SSH Connection & Login to VM2(Client_Machine)
				
				- Copy Files from VM1 to VM2(Client_Machine)


				Client_Machine ::::
					
					useradd adminuser1 -s /bin/bash -m -d /home/adminuser1

					su - adminuser1	

					mkdir .ssh 

					cd .ssh 

					vi authorized_keys

					#paste the id_ecdsa.pub of devopsadmin user from Server machine to authorized_keys file in Client Machine 

					chmod 600 /home/adminuser1/.ssh/*
					
					
					
					SSH Connection :
					
						Host_Name			# 172.31.7.165		(Private IP Address of Target Server)
						
						User_Name 			# adminuser1		(User Name configured in Target Server)
						
						Credentials ()		#paste the id_ecdsa.pub of devopsadmin user from Server machine to authorized_keys file in Client Machine 

	
	
			- From Source Server execute this Command as a devopsadmin user ::::
			
				ssh adminuser1@172.31.7.165
			
			
			- Copy Files from VM1 to VM2(Client_Machine)	

				Server Machine ::::		
					/home/devopsadmin/sourcefile.txt 
					
				Client Machine ::::
					/home/adminuser1/sourcefile.txt
			
				#cp  /home/devopsadmin/sourcefile.txt home/devopsadmin/dir1/
				
				scp /home/devopsadmin/sourcefile1.txt adminuser1@172.31.7.165:/home/adminuser1
				
				
SHELL Scripting :::

	Scripting Languages ?
		- Are used to perform some process automation/validations
		- Light-weight 
		- Eg.: java scripts / shell scripts / yaml script / groovy / python scripts
			(vs)
	Progamming Language ?
		- Are used to create some business applications 
		- Huge Collection of Programming components
		- Eg.: Java/.Net Framework/Python/Ruby/Cobol/C
		
		

	- Shell Scripts are the collection of Linux Commands.
	
	- It is used to perform some process automation in Linux Machines.
	
	- Mainly used to reuse the commands and scripts.
	
	- Executed in parallel.
	
	Build Server :::
	
		-> Compile the Source Code, Perform Unit Testing, Create Artifacts 
		
			- *.java 		===> *.war / *.jar (Output)
			
			Tools :
			
				apt install git -y  
				apt install jdk -y
				apt install Maven -y
				apt install docker.io -y
				
			$ vi setupmvnbuildserver.sh
			
			apt install git -y  
	        apt install jdk -y
		    apt install Maven -y
            apt install docker.io -y
			
			$ ./setupmvnbuildserver.sh				# Execute the Linux Shell Scripts


  180  useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin
  181  su - devopsadmin
  182  su - dummyuser1
  183  su - devopsadmin
  184  passwd devopsadmin
  185  su - dummyuser1
  186  exit
  187  clear
  188  ls
  189  ll
  190  echo "rec1" >> file1.txt
  191  ll
  192  echo "rec1" >> test1.sh
  193  ll
  194  clear
  195  ll
  196  chmod 777 test1.sh
  197  ll
  198  chmod 755 test1.sh
  199  ll
  200  clear
  201  su - devopsadmin
  202  clear
  203  history
  204  history


devopsadmin@ip-172-31-1-164:~$ history
    1  pwd
    2  exit
    3  pwd
    4  clear
    5  exit
    6  clear
    7  ls
    8  ls -a
    9  exit
   10  ls -a
   11  ssh-keygen -t ecdsa -b 521
   12  ls -a
   13  cd .ssh/
   14  ls
   15  ll
   16  cat id_ecdsa
   17  cat id_ecdsa.pub
   18  ls
   19  cat id_ecdsa.pub > authorized_keys
   20  ls
   21  ll
   22  chmod 600 /home/devopsadmin/.ssh/*
   23  ll
   24  clear
   25  history
   26  exit
   27  docker ps
   28  exit
   29  history

			
**********************
Day 7 : 5th Feb. 2025 
**********************


	- Fundamentals of Shell Scripting!	
	
	- Fundamentals of Python!	
	
	Programs/Scripts - Set of Instructions that are written in High-Level Language to perform some task.
	
			$ vi setupmvnbuildserver.sh
			
			apt install git -y  
	        apt install jdk -y
		    apt install Maven -y
            apt install docker.io -y
			
			$ ./setupmvnbuildserver.sh				# Execute the Linux Shell Scripts				
			
	Concepts and Programming/Scripts Constructs :
	
		--> Automate the tasks 
		--> Resuability 
		
	IT --> Data Handling!
	
	What is Data ?
	
		- Raw facts --> without any meaning
		
		
		INDIA	--> 
		
		
	What is an Information ?
	
		- It is the processed Data 
		- When we process the data it becomes information.
		
		- INDIA is a Country 
		
	
	variables 
	
		int x = 15;
		int z = 20
		
		String Name = "xxxx";
		
			print Name 
		
		Array of Variables 
		
			- Group of Values with same name and dat type. 
			- The Values are identified using Index of an Array 
		
		String Name[5] = {'asdf','asdfa','wrwerw','qwqwqq','nghnghn'}
							0		1		2		3			4
				
				print Name[3]			# qwqwqq
			
			
		String User_Name = "" ;
		
			input User_Name 		###	Alphabets - String of Characters 
			
						'asdfa'
						123123123123123
						
		Validate the Input data :
		
		Conditional Statements :
		
			IF 
			
			IF - Else 
			
			IF - Else-if -Else 
			
			Switch Case Statement 
			
		Operators 
		
			num1 	==> 5 
			
			num2    ==> 10
			
			If num1 == num2 	# print both are equal 
			
			else if 
			
				num1 > num2 	# print num1 is greater 
				
		Comparison Operator --->      ==,<,>,<=,>=,!=
		
		String Name = "asdfas"
		
			print Name 		#
		
	
		String Name[5] = {'asdf','asdfa','wrwerw','wrwerw','wrwerw'}
		
				length = len(Name)			# 5
					Name[0] = asdf
					
				for(i=0;i<length;i++)
					{
						print Name[i]
					}


					Name[0] = asdf
					Name[1] = asdfa
					Name[2] = wrwerw
					Name[3] = wrwerw
					Name[4] = wrwerw
					
					
		Iterations :
		
			for loop 
			
			while loop 
			
			do-while 
			
	
		File Handling 
		
			--> flat file (xml/json/yaml/txt-file)
			
			- Read / Write / Update the files using scripts 
			
		Database :
		
			- Manage the Relational Data 
			
			- Data are organized in the form of rows and columns using Tables.
			
			Student_Table :
			
			Stud_ID		Stud_Name	Contact_Number	Course_Name 	Email_ID 
			
			1001		zzzzz		123123123			devops		asdfsdfa@asdf.com
			1002		zzzzz		123123124			devops		asdfsdfb@asdf.com
			1003		zzzzz		123123125			devops		asdfsdfc@asdf.com
			
	Shell Scripting ::::
	
	Programs/Scripts - Set of Instructions that are written in High-Level Language to perform some task.
	
			$ vi setupmvnbuildserver.sh
			
			apt install git -y  
	        apt install jdk -y
		    apt install Maven -y
            apt install docker.io -y
			
			$ ./setupmvnbuildserver.sh				# Execute the Linux Shell Scripts				
		
			
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to print Hello World on terminal using echo command

Source Code:

#!/bin/bash
#
echo "Hello World"

























~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to print the calender month by default.

Source Code:

#!/bin/bash
#	     
echo "The Month is"
cal # cal command displays current month by default

























~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to read user input and perform operations with them.

Source Code:

#!/bin/bash


echo "The Month is"
cal # cal command displays current month by default

echo -n "Enter number 1 : " # -n option supresses newline
read NUM1 # Read the user input from Standard Input and store in Variable NUM1

echo -n "Enter number 2 : "
read NUM2

SUM=$(($NUM1 + $NUM2)) # Arithmetic expansion using double parentheses
echo "The sum is $SUM"
















~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show usage of if condition

#Operators :: 6 Operators

Source Code:


#!/bin/bash

NUM1=5 # variabe assignment
NUM2=2

if [ $NUM1 -gt $NUM2 ] # -gt is to test integer numbers
then
    echo "NUM1 > NUM2"
fi



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show usage of if else condition

Source Code:

#!/bin/bash

NUM1=2 # Variabe assignment
NUM2=5

if [ $NUM1 -lt $NUM2 ]  # -lt is to test intiger numbers
then
    echo "NUM1 < NUM2"
else
    echo "NUM1 > NUM2"
fi
















~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show usage of else if condition

Source Code:

#!/bin/bash
#

echo -n "Enter a number: "
read NUM

if [ $NUM -gt 0 ]
then
    echo "$NUM is +ve"
elif [ $NUM -lt 0 ]
then
    echo "$NUM is -ve"
else
    echo "$NUM is 0"
fi

echo "done"














75

-95



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to demonstrate case statement

Source Code:

#!/bin/bash

echo -n "Enter a character: "
read CHAR							# A , a ,e,i,o,u l

case $CHAR in
	a) echo "You entered $CHAR which is a vowel";;  # ;; Terminates each option
	e) echo "You entered $CHAR which is a vowel";;
	i) echo "You entered $CHAR which is a vowel";;
	o) echo "You entered $CHAR which is a vowel";;
	u) echo "You entered $CHAR which is a vowel";;
	*) echo "You entered $CHAR which is not a vowel";; # Defaults to everything else
esac












echo "What if you enter upper case letters!!?, Check the next example"


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to demonstrate case statement

Source Code:

#!/bin/bash

echo -n "Enter a character: "
read CHAR

case $CHAR in
	a | A) # Test for both Lower or Upper case letter
		# You may write commands in this fashion too!!, means multiline commands
		echo "You entered $CHAR which is a vowel"
		;; # Terminates each option
	e | E) 
		echo "You entered $CHAR which is a vowel"
		;;
	i | I) 
		echo "You entered $CHAR which is a vowel"
		;;
	o | O) 
		echo "You entered $CHAR which is a vowel"
		;;
	u | U) 
		echo "You entered $CHAR which is a vowel"
		;;
	*)  # Defaults to everything else
		echo "You entered $CHAR which is not a vowel"
		;;
esac
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to show usage of string compare operator == and !=

Source Code:

#!/bin/bash

STR1="Hello"
STR2="Hello"

if [ ${STR1} == ${STR2} ]
then
    echo "Strings match"
else
    echo "Strings don't match"
fi
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to show usage while loop

Source Code:

#!/bin/bash
#

COUNT=0

while [ $COUNT -lt 5 ]
do
    echo "Loop count is ${COUNT}"
    COUNT=$((COUNT + 1))
done

echo "Done"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to demonstarte for loop [ Bash syntax ]

Source Code:

#!/bin/bash
#

COUNT=0

for i in 0 1 2 3 4
do
    echo "Loop count is ${COUNT}"
    COUNT=$((COUNT + 1))
done


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to demonstarte for loop [ C syntax ]

Source Code:

#!/bin/bash

COUNT=0

for ((i = 0; i < 5; i++))
do
    echo "Loop count is ${COUNT}"
    COUNT=$((COUNT + 1))
done

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show the usage of command line arguments, Here we access positional arguments using $1, $2 …

Source Code:

#!/bin/bash

echo "Total no. of argument: $#"

echo "Program name: $0"
echo "1st argument: $1"
echo "2nd argument: $2"
echo "3rd argument: $3"
